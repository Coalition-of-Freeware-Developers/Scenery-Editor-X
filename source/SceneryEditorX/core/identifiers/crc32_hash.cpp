/**
* -------------------------------------------------------
* Scenery Editor X
* -------------------------------------------------------
* Copyright (c) 2025 Thomas Ray
* Copyright (c) 2025 Coalition of Freeware Developers
* -------------------------------------------------------
* crc32_hash.cpp
* -------------------------------------------------------
* Created: 13/7/2025
* -------------------------------------------------------
*/
#include <array>
#include <cstdint>
#include <SceneryEditorX/core/identifiers/hash.h>
#include <string>

/// ---------------------------------------------

/**
 * @brief Generates a compile-time CRC32 lookup table using the IEEE 802.3 polynomial.
 *
 * This function creates a 256-element lookup table that enables efficient CRC32 calculation
 * by precomputing the CRC values for all possible 8-bit values. The table is generated
 * using the IEEE 802.3 CRC32 polynomial (0xEDB88320) in reflected form.
 *
 * The algorithm processes each byte value (0-255) through 8 iterations, checking the
 * least significant bit and conditionally XORing with the polynomial. This creates
 * a table that can be used for fast table-driven CRC calculation.
 *
 * @return std::array<uint32_t, 256> Generated CRC32 lookup table
 *
 * @note Uses the IEEE 802.3 polynomial in reflected form for standard CRC32 compatibility
 *
 * Algorithm steps for each byte value:
 * 1. Initialize CRC with the byte value
 * 2. For 8 iterations:
 *    - Check if LSB is set (create mask)
 *    - Right shift CRC by 1
 *    - XOR with polynomial if LSB was set
 * 3. Store result in lookup table
 */
std::array<uint32_t, 256> gen_crc32_table()
{
    constexpr int num_bytes = 256;
    constexpr int num_iterations = 8;
    constexpr uint32_t polynomial = 0xEDB88320;  // IEEE 802.3 polynomial in reflected form

    std::array<uint32_t, num_bytes> crc32_table{};

    for (int byte = 0; byte < num_bytes; ++byte)
	{
		uint32_t crc = static_cast<uint32_t>(byte);
        for (int i = 0; i < num_iterations; ++i)
		{
			int mask = -((int)crc & 1);  // Create mask: -1 if LSB set, 0 otherwise
            crc = (crc >> 1) ^ (polynomial & mask);  // Shift right and conditionally XOR
        }

        crc32_table[byte] = crc;
    }

    return crc32_table;
}

/// ---------------------------------------------

/**
 * @brief Generated CRC32 lookup table for efficient hash computation.
 *
 * This static constant contains the precomputed CRC32 lookup table generated by
 * gen_crc32_table(). The table enables O(1) lookup during CRC32 calculation,
 * significantly improving performance compared to bit-by-bit calculation.
 */
static const auto crc32_table = gen_crc32_table();

/// ---------------------------------------------

namespace SceneryEditorX
{

    /**
     * @brief Calculates the CRC32 hash value for a null-terminated C-style string.
     *
     * This function implements the CRC32 algorithm using the precomputed lookup table
     * for efficient calculation. It processes the string character by character until
     * the null terminator is encountered.
     *
     * The algorithm:
     * 1. Initialize CRC to 0xFFFFFFFF (all bits set)
     * 2. For each character in the string:
     *    - XOR character with low 8 bits of CRC
     *    - Use result as index into lookup table
     *    - XOR table value with CRC shifted right by 8 bits
     * 3. Return bitwise NOT of final CRC value
     *
     * @param str Null-terminated C-style string to hash
     * @return uint32_t 32-bit CRC32 hash value
     *
     * @note Uses IEEE 802.3 CRC32 polynomial (0xEDB88320) in reflected form
     * @note Final result is bitwise inverted as per CRC32 standard
     *
     * @warning Input string must be null-terminated to avoid undefined behavior
     *
     * @example
     * @code
     * const char* filename = "scene.edx";
     * uint32_t fileHash = Hash::CRC32(filename);
     * @endcode
     */
    uint32_t Hash::CRC32(const char* str)
    {
        auto crc = 0xFFFFFFFFu;  // Initialize to all bits set

        // Process string character by character until null terminator
        for (auto i = 0u; auto c = str[i]; ++i) {
            crc = crc32_table[(crc ^ c) & 0xFF] ^ (crc >> 8);
        }

        return ~crc;  // Return bitwise NOT of final CRC
    }

    /**
     * @brief Calculates the CRC32 hash value for a std::string.
     *
     * This is a convenience wrapper around the C-style string CRC32 function.
     * It automatically extracts the null-terminated C-string from the std::string
     * and delegates to the primary CRC32 implementation.
     *
     * @param string Standard string object to hash
     * @return uint32_t 32-bit CRC32 hash value
     *
     * @note This function internally calls CRC32(string.c_str())
     * @note Inherits all properties and warnings from the C-string version
     *
     * @example
     * @code
     * std::string assetName = "building_texture";
     * uint32_t nameHash = Hash::CRC32(assetName);
     * @endcode
     */
    uint32_t Hash::CRC32(const std::string& string)
    {
        return CRC32(string.c_str());
    }

}

/// ---------------------------------------------
