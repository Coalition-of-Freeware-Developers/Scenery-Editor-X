
		/*
		##########################################################
					3D MODEL MATRIX IMPLIMENTATION
		##########################################################
		*/

		glm::mat4 model = glm::mat4(1.0f);
		glm::mat4 view  = glm::mat4(1.0f);
		glm::mat4 proj  = glm::mat4(1.0f);

		model = glm::rotate(model, glm::radians(rotation), glm::vec3(0.0f, 1.0f, 0.0f));

		// Viewport Matrix
		view = glm::translate(view, glm::vec3(0.0f, -0.5f, -2.0f));
		
		/*
		##########################################################
		TO DO: Fix this so that the camera has boundery detection and cannot clip into objects.
		##########################################################
		*/

		// Perspective Matrix/ Clipping Plane 
		proj = glm::perspective(glm::radians(45.0f), (float)(width / hight), 0.1f, 100.0f);

		int modelLoc = glGetUniformLocation(shaderProgram.ID, "model");
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		int viewLoc = glGetUniformLocation(shaderProgram.ID, "view");
		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		int projLoc = glGetUniformLocation(shaderProgram.ID, "proj");
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(proj));

		/*
		##########################################################
		##########################################################
		*/

		// Assigns a value to the uniform; NOTE: Must always be done after activating the Shader Program
		glUniform1f(uniID, 0.5f);